{"version":3,"sources":["modalComponent.js","components.js","ListOfSyrups.js","App.js","serviceWorker.js","index.js"],"names":["Component","SSNav","props","react_default","a","createElement","Navbar","className","fixed","expand","Brand","href","Toggle","aria-controls","Collapse","id","Nav","Link","Form","inline","Button","variant","SSJumbotron","Jumbotron","fluid","Container","style","textAlign","CreateCard","Card","width","Body","Title","title","Subtitle","subtitle","Text","text","List","sentence","i","objects","length","ListOfSyrups","Syrups","App","CardGroup","body","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.493f2256.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport { Modal, Button } from \"react-bootstrap\";\n\nexport class NewModal extends Component {\n  constructor(props, context) {\n    super(props, context);\n\n    this.handleShow = this.handleShow.bind(this);\n    this.handleClose = this.handleClose.bind(this);\n\n    this.state = {\n      show: false\n    };\n  }\n\n  handleClose() {\n    this.setState({ show: false });\n  }\n\n  handleShow() {\n    this.setState({ show: true });\n  }\n  render() {\n    const props = this.props;\n    return (\n      <>\n        <Button variant=\"primary\" onClick={this.handleShow}>\n          {props.launchText}\n        </Button>\n        <Modal show={this.state.show} onHide={this.handleClose}>\n          <Modal.Header closeButton>\n            <Modal.Title>{props.title}</Modal.Title>\n          </Modal.Header>\n          <Modal.Body>{props.body}</Modal.Body>\n          <Modal.Footer>\n            <Button variant=\"secondary\" onClick={this.handleClose}>\n              Close\n            </Button>\n          </Modal.Footer>\n        </Modal>\n      </>\n    );\n  }\n}\n","// components.js\nimport React from \"react\";\nimport {\n  Navbar,\n  Nav,\n  Form,\n  Jumbotron,\n  Container,\n  Card,\n  Image,\n  Button\n} from \"react-bootstrap\";\n/*\n * - launchText\n * - title\n * - body\n */\nimport { NewModal } from \"./modalComponent\";\n// import { ListOfSyrups } from \"./ListOfSyrups\";\n\n/**\n * reusable nonexportable functions\n **/\n\n/***\n * Exported Functions used\n *\n **/\nexport function SSNav(props) {\n  return (\n    <Navbar className=\"nav\" fixed=\"top\" expand=\"lg\">\n      <Navbar.Brand href=\"#home\">Southside Syrups</Navbar.Brand>\n      <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\n      <Navbar.Collapse id=\"basic-navbar-nav\">\n        <Nav className=\"mr-auto\">\n          <Nav.Link href=\"\">About Us</Nav.Link>\n          <Nav.Link href=\"#CardTwo\">List of Syrups</Nav.Link>\n          <Nav.Link href=\"#CardThree\"> How to Purchase </Nav.Link>\n        </Nav>\n        <Form inline>\n          <Button variant=\"outline-success\">Login</Button>\n        </Form>\n      </Navbar.Collapse>\n    </Navbar>\n  );\n}\nexport function SSJumbotron(props) {\n  return (\n    <Jumbotron className=\"jumbo\" fluid>\n      <Container>\n        <br />\n        <h1 style={{ textAlign: \"center\" }}> Southside Syrups </h1>\n        <p style={{ textAlign: \"center\" }}>\n          <br />\n          One of Savannah's most interesting syrup sellers on the market. With\n          the most creative flavors and the least amount of excess sugar and\n          preservates.\n        </p>\n      </Container>\n    </Jumbotron>\n  );\n}\n\nexport function CreateCard(props) {\n  return (\n    <Card\n      className=\"singleCard hvr-grow\"\n      id={props.id}\n      style={{ width: \"18rem\" }}\n    >\n      <Card.Body>\n        <Card.Title>{props.title}</Card.Title>\n        <Card.Subtitle className=\"mb-2 text-muted\">\n          {props.subtitle}\n        </Card.Subtitle>\n        <Card.Text>{props.text}</Card.Text>\n      </Card.Body>\n    </Card>\n  );\n}\nexport function LargeImg(props) {\n  return <Image src={props.src} fluid />;\n}\n","//ListOfSyrups.js\nimport React from \"react\";\nimport Syrups from \"./syrup_data.json\";\n\nfunction List(props) {\n  var sentence;\n  for (let i = 0; i < props.objects.length; i++) {\n    sentence += <li> + props.objects[i] + </li>;\n  }\n  return <span>{sentence}</span>;\n}\n\nexport function ListOfSyrups(props) {\n  return (\n    <ul>\n      <List objects={Syrups} />\n    </ul>\n  );\n}\n","import React, { Component } from \"react\";\nimport { Container, CardGroup } from \"react-bootstrap\";\nimport { SSNav, SSJumbotron, CreateCard } from \"./components\";\nimport { ListOfSyrups } from \"./ListOfSyrups\";\n\nimport \"./App.css\";\n/*\n * - launchText\n * - title\n * - body\n */\n//import { NewModal } from \"./modalComponent\";\n\nclass App extends Component {\n  render() {\n    return (\n      <div>\n        <Container>\n          <div className=\"App\">\n            <SSNav />\n            <ListOfSyrups />\n            <SSJumbotron />\n            <CardGroup>\n              <CreateCard\n                title=\"About Us\"\n                subtitle=\"Based locally in savannah\"\n                text=\"some example text\"\n                body=\"...\"\n                id=\"cardOne\"\n              />\n              <CreateCard\n                title=\"Buy our syrups\"\n                subtitle=\"Thinking of buying one of our syrups?\"\n                text=\"Buying one of our syrups is super easy. Just email us and we can mail it to you!\"\n                id=\"cardTwo\"\n              />\n              <CreateCard\n                title=\"Got Questions?\"\n                subtitle=\"Want to know more about our syrups or have any feedback?\"\n                text=\"Email us at southside.syrups@gmail.com!\"\n                id=\"cardThree\"\n              />\n            </CardGroup>\n          </div>\n        </Container>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./App.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}