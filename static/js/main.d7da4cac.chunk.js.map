{"version":3,"sources":["modalComponent.js","components.js","App.js","serviceWorker.js","index.js"],"names":["NewModal","_Component","props","context","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleShow","bind","assertThisInitialized","handleClose","state","show","inherits","createClass","key","value","setState","react_default","a","createElement","Fragment","Button","className","onClick","launchText","Modal","onHide","Header","closeButton","Title","title","Body","body","Footer","variant","Component","SSNav","Navbar","fixed","expand","Brand","href","Toggle","aria-controls","Collapse","id","Nav","Link","Form","inline","SSJumbotron","Jumbotron","fluid","Container","style","textAlign","CreateCard","Card","width","Subtitle","subtitle","Text","text","syrupList","name","price","oz","App","CardGroup","modalComponent_NewModal","ListGroup","map","syrup","Item","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"gVAGaA,EAAb,SAAAC,GACE,SAAAD,EAAYE,EAAOC,GAAS,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAP,IAC1BI,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAL,GAAAU,KAAAH,KAAML,EAAOC,KAERQ,WAAaP,EAAKO,WAAWC,KAAhBP,OAAAQ,EAAA,EAAAR,QAAAQ,EAAA,EAAAR,CAAAD,KAClBA,EAAKU,YAAcV,EAAKU,YAAYF,KAAjBP,OAAAQ,EAAA,EAAAR,QAAAQ,EAAA,EAAAR,CAAAD,KAEnBA,EAAKW,MAAQ,CACXC,MAAM,GAPkBZ,EAD9B,OAAAC,OAAAY,EAAA,EAAAZ,CAAAL,EAAAC,GAAAI,OAAAa,EAAA,EAAAb,CAAAL,EAAA,EAAAmB,IAAA,cAAAC,MAAA,WAaIb,KAAKc,SAAS,CAAEL,MAAM,MAb1B,CAAAG,IAAA,aAAAC,MAAA,WAiBIb,KAAKc,SAAS,CAAEL,MAAM,MAjB1B,CAAAG,IAAA,SAAAC,MAAA,WAoBI,IAAMlB,EAAQK,KAAKL,MACnB,OACEoB,EAAAC,EAAAC,cAAAF,EAAAC,EAAAE,SAAA,KACEH,EAAAC,EAAAC,cAACE,EAAA,EAAD,CAAQC,UAAU,SAASC,QAASrB,KAAKI,YACtCT,EAAM2B,YAETP,EAAAC,EAAAC,cAACM,EAAA,EAAD,CAAOd,KAAMT,KAAKQ,MAAMC,KAAMe,OAAQxB,KAAKO,aACzCQ,EAAAC,EAAAC,cAACM,EAAA,EAAME,OAAP,CAAcC,aAAW,GACvBX,EAAAC,EAAAC,cAACM,EAAA,EAAMI,MAAP,KAAchC,EAAMiC,QAEtBb,EAAAC,EAAAC,cAACM,EAAA,EAAMM,KAAP,KAAalC,EAAMmC,MACnBf,EAAAC,EAAAC,cAACM,EAAA,EAAMQ,OAAP,KACEhB,EAAAC,EAAAC,cAACE,EAAA,EAAD,CAAQa,QAAQ,WAAhB,YACAjB,EAAAC,EAAAC,cAACE,EAAA,EAAD,CAAQa,QAAQ,YAAYX,QAASrB,KAAKO,aAA1C,gBAjCZd,EAAA,CAA8BwC,aCuCvB,SAASC,EAAMvC,GACpB,OACEoB,EAAAC,EAAAC,cAACkB,EAAA,EAAD,CAAQf,UAAU,MAAMgB,MAAM,MAAMC,OAAO,MACzCtB,EAAAC,EAAAC,cAACkB,EAAA,EAAOG,MAAR,CAAcC,KAAK,SAAnB,oBACAxB,EAAAC,EAAAC,cAACkB,EAAA,EAAOK,OAAR,CAAeC,gBAAc,qBAC7B1B,EAAAC,EAAAC,cAACkB,EAAA,EAAOO,SAAR,CAAiBC,GAAG,oBAClB5B,EAAAC,EAAAC,cAAC2B,EAAA,EAAD,CAAKxB,UAAU,WACbL,EAAAC,EAAAC,cAAC2B,EAAA,EAAIC,KAAL,CAAUN,KAAK,IAAf,YACAxB,EAAAC,EAAAC,cAAC2B,EAAA,EAAIC,KAAL,CAAUN,KAAK,IAAf,kBACAxB,EAAAC,EAAAC,cAAC2B,EAAA,EAAIC,KAAL,CAAUN,KAAK,cAAf,sBAEFxB,EAAAC,EAAAC,cAAC6B,EAAA,EAAD,CAAMC,QAAM,GACVhC,EAAAC,EAAAC,cAACE,EAAA,EAAD,CAAQa,QAAQ,mBAAhB,YAcH,SAASgB,EAAYrD,GAC1B,OACEoB,EAAAC,EAAAC,cAACgC,EAAA,EAAD,CAAW7B,UAAU,QAAQ8B,OAAK,GAChCnC,EAAAC,EAAAC,cAACkC,EAAA,EAAD,KACEpC,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,MAAImC,MAAO,CAAEC,UAAW,WAAxB,sBACAtC,EAAAC,EAAAC,cAAA,KAAGmC,MAAO,CAAEC,UAAW,WACrBtC,EAAAC,EAAAC,cAAA,WADF,0JAWD,SAASqC,EAAW3D,GACzB,OACEoB,EAAAC,EAAAC,cAACsC,EAAA,EAAD,CAAMnC,UAAU,aAAauB,GAAIhD,EAAMgD,GAAIS,MAAO,CAAEI,MAAO,UACzDzC,EAAAC,EAAAC,cAACsC,EAAA,EAAK1B,KAAN,KACEd,EAAAC,EAAAC,cAACsC,EAAA,EAAK5B,MAAN,KAAahC,EAAMiC,OACnBb,EAAAC,EAAAC,cAACsC,EAAA,EAAKE,SAAN,CAAerC,UAAU,mBACtBzB,EAAM+D,UAET3C,EAAAC,EAAAC,cAACsC,EAAA,EAAKI,KAAN,KAAYhE,EAAMiE,QAYnB,IAAMC,EAAY,CACvB,CAAElB,GAAI,EAAGmB,KAAM,WAAYC,MAAO,GAAIC,GAAI,GAC1C,CAAErB,GAAI,EAAGmB,KAAM,mBAAoBC,MAAO,GAAIC,GAAI,GAClD,CAAErB,GAAI,EAAGmB,KAAM,WAAYC,MAAO,GAAIC,GAAI,IChD7BC,mLAxCX,OACElD,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACkC,EAAA,EAAD,KACEpC,EAAAC,EAAAC,cAAA,OAAKG,UAAU,OACbL,EAAAC,EAAAC,cAACiB,EAAD,MACAnB,EAAAC,EAAAC,cAAC+B,EAAD,MACAjC,EAAAC,EAAAC,cAACiD,EAAA,EAAD,KACEnD,EAAAC,EAAAC,cAACqC,EAAD,CACE1B,MAAM,WACN8B,SAAS,4BACTE,KAAK,oBACL9B,KAAK,MACLa,GAAG,YAEL5B,EAAAC,EAAAC,cAACqC,EAAD,CACE1B,MAAM,iBACN8B,SAAS,wCACTE,KACE7C,EAAAC,EAAAC,cAACkD,EAAD,CACE7C,WAAW,QACXM,MAAM,oBACNE,KDRhBf,EAAAC,EAAAC,cAACmD,EAAA,EAAD,CAAWpC,QAAQ,QAChB6B,EAAUQ,IAAI,SAAAC,GAAK,OAClBvD,EAAAC,EAAAC,cAACmD,EAAA,EAAUG,KAAX,CAAgBnD,UAAU,UAAUR,IAAK0D,EAAM1D,KAC5C0D,EAAMR,KADT,MACkBQ,EAAMP,MADxB,QACoCO,EAAMN,SCQlCrB,GAAG,YAEL5B,EAAAC,EAAAC,cAACqC,EAAD,CACE1B,MAAM,iBACN8B,SAAS,2DACTE,KAAK,0CACLjB,GAAG,yBAhCDV,aCNEuC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO/D,EAAAC,EAAAC,cAAC8D,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.d7da4cac.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport { Modal, Button } from \"react-bootstrap\";\n\nexport class NewModal extends Component {\n  constructor(props, context) {\n    super(props, context);\n\n    this.handleShow = this.handleShow.bind(this);\n    this.handleClose = this.handleClose.bind(this);\n\n    this.state = {\n      show: false\n    };\n  }\n\n  handleClose() {\n    this.setState({ show: false });\n  }\n\n  handleShow() {\n    this.setState({ show: true });\n  }\n  render() {\n    const props = this.props;\n    return (\n      <>\n        <Button className=\"yellow\" onClick={this.handleShow}>\n          {props.launchText}\n        </Button>\n        <Modal show={this.state.show} onHide={this.handleClose}>\n          <Modal.Header closeButton>\n            <Modal.Title>{props.title}</Modal.Title>\n          </Modal.Header>\n          <Modal.Body>{props.body}</Modal.Body>\n          <Modal.Footer>\n            <Button variant=\"primary\">Purchase</Button>\n            <Button variant=\"secondary\" onClick={this.handleClose}>\n              Close\n            </Button>\n          </Modal.Footer>\n        </Modal>\n      </>\n    );\n  }\n}\n","/*** components.js *\n ** -- Read this article on React-Router: http://tiny.cc/39jl4y\n **/\nimport React from \"react\";\nimport {\n  Navbar,\n  Nav,\n  Form,\n  Jumbotron,\n  Container,\n  Card,\n  Image,\n  ListGroup,\n  Button\n} from \"react-bootstrap\";\n/*\n * - launchText\n * - title\n * - body\n */\nimport { NewModal } from \"./modalComponent\";\n// import { ListOfSyrups } from \"./ListOfSyrups\";\n\n/**\n * reusable nonexportable functions\n **/\n\n/***\n * Exported Functions used\n *\n **/\nexport function renderSyrups() {\n  return (\n    <ListGroup variant=\"info\">\n      {syrupList.map(syrup => (\n        <ListGroup.Item className=\"syrupLI\" key={syrup.key}>\n          {syrup.name}: ${syrup.price}, Oz:{syrup.oz}\n        </ListGroup.Item>\n      ))}\n    </ListGroup>\n  );\n}\nexport function SSNav(props) {\n  return (\n    <Navbar className=\"nav\" fixed=\"top\" expand=\"lg\">\n      <Navbar.Brand href=\"#home\">Southside Syrups</Navbar.Brand>\n      <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\n      <Navbar.Collapse id=\"basic-navbar-nav\">\n        <Nav className=\"mr-auto\">\n          <Nav.Link href=\"\">About Us</Nav.Link>\n          <Nav.Link href=\"\">List of Syrups</Nav.Link>\n          <Nav.Link href=\"#CardThree\"> How to Purchase </Nav.Link>\n        </Nav>\n        <Form inline>\n          <Button variant=\"outline-success\">Login</Button>\n        </Form>\n      </Navbar.Collapse>\n    </Navbar>\n  );\n}\n\nexport function AboutUs() {\n  return (\n    <Container>\n      <h1>About us!</h1>\n    </Container>\n  );\n}\nexport function SSJumbotron(props) {\n  return (\n    <Jumbotron className=\"jumbo\" fluid>\n      <Container>\n        <br />\n        <h1 style={{ textAlign: \"center\" }}> Southside Syrups </h1>\n        <p style={{ textAlign: \"center\" }}>\n          <br />\n          One of Savannah's most interesting syrup sellers on the market. With\n          the most creative flavors and the least amount of excess sugar and\n          preservates.\n        </p>\n      </Container>\n    </Jumbotron>\n  );\n}\n\nexport function CreateCard(props) {\n  return (\n    <Card className=\"singleCard\" id={props.id} style={{ width: \"18rem\" }}>\n      <Card.Body>\n        <Card.Title>{props.title}</Card.Title>\n        <Card.Subtitle className=\"mb-2 text-muted\">\n          {props.subtitle}\n        </Card.Subtitle>\n        <Card.Text>{props.text}</Card.Text>\n      </Card.Body>\n    </Card>\n  );\n}\nexport function LargeImg(props) {\n  return <Image src={props.src} fluid />;\n}\n\n/** Where all the syrups are stored\n * - id, name, price, oz required\n **/\nexport const syrupList = [\n  { id: 1, name: \"Vaalmond\", price: 15, oz: 6 },\n  { id: 2, name: \"Classic Hazelnut\", price: 16, oz: 6 },\n  { id: 3, name: \"Lavender\", price: 17, oz: 8 }\n];\n","import React, { Component } from \"react\";\nimport { Container, CardGroup } from \"react-bootstrap\";\nimport {\n  SSNav,\n  SSJumbotron,\n  CreateCard,\n  renderSyrups,\n  syrupList\n} from \"./components\";\n\nimport \"./App.css\";\n/*\n * - launchText\n * - title\n * - body\n */\nimport { NewModal } from \"./modalComponent\";\n\nclass App extends Component {\n  render() {\n    return (\n      <div>\n        <Container>\n          <div className=\"App\">\n            <SSNav />\n            <SSJumbotron />\n            <CardGroup>\n              <CreateCard\n                title=\"About Us\"\n                subtitle=\"Based locally in savannah\"\n                text=\"some example text\"\n                body=\"...\"\n                id=\"cardOne\"\n              />\n              <CreateCard\n                title=\"Buy our syrups\"\n                subtitle=\"Thinking of buying one of our syrups?\"\n                text={\n                  <NewModal\n                    launchText=\"Order\"\n                    title=\"Order some syrups\"\n                    body={renderSyrups()}\n                  />\n                }\n                id=\"cardTwo\"\n              />\n              <CreateCard\n                title=\"Got Questions?\"\n                subtitle=\"Want to know more about our syrups or have any feedback?\"\n                text=\"Email us at southside.syrups@gmail.com!\"\n                id=\"cardThree\"\n              />\n            </CardGroup>\n          </div>\n        </Container>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./App.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}